clc;
clear all; 
format short;
tc=100; 
stp=85;
mu=1; %initial Damping Coefficient%
true_mu=2; %true value%
X0 =[0.1;0.1;true_mu];
x0 =[0.1;0.1;mu];
tspan=[0:0.01:tc]; 
TT=[0:0.01:tc]; 
H=[1 0 0; 0 1 0];
m=3; % number of state variables
n=2; %number of measurements
[tr,xr] = ode45(@VanderPolt,tspan,X0);
truth =cat(2,TT',xr);
%% parameters
R=0.01;    %0.001%  % variance measurement Error%
mem=5000;   %ensemble members%
dt=1;       %sampling frequency
Ut=[];
U=[];
for t=dt:dt:tc % Simulate the model 
    y = xr(floor(t*100+1),1:2)+ sqrtm(R)*randn(1,2);
    ut=xr(floor(t*100+1),:); %True Values%
    Ut=[Ut; ut];
    U=[U;y];
end
% Ensembles
%%Previous
myf3= 'C:\Users\arundhutibaner\Documents\MATLAB\Manuscript';
files3=dir(fullfile(myf3,'initial.txt'));
dm=dlmread(fullfile(myf3,files3(1).name));
x0_en=dm;
%% current
% pert01=randn(mem,1)*sqrt(sigma1); 
% pert02=randn(mem,1)*sqrt(sigma2);
pert03=randn(mem,1)*sqrt(sigma3);
% % sigma=diag([sigma1 sigma2]); 
% % for i=1:mem
% % x0_en(:,i) = x0(1:2) + sqrt(sigma) * [randn; randn]; % perturb initial conditions
% % end
% % x0_en=x0_en';
x0_en(:,3)=mu+pert03;
%x0_en=[X0(1)+pert01 X0(2)+pert02 mu+pert03];
% x0_en=[dm(:,1) dm(:,2) mu+pert03]; %Perturbed Initial Value of State for parameter%
%x0_en=[repmat([X0(1) X0(2)],mem,1) dm(:,3)]; %Perturbed Initial Value of State for parameter%

fixed_x0_en=x0_en;
figure(1)
Lwdth      = 1.25;
Msize      = 12;
FntSize    = 14;
subplot(131)
hist(fixed_x0_en(:,1),mem)
ylabel('Frequency','fontsize',FntSize)
plottitle = ['Distr. for source ' num2str(1) ', N=' num2str(mem)];
hold on
plot(x0(1),0,'.r','markersize',40)
title(plottitle,'fontsize',FntSize,'FontWeight','bold') 
subplot(132)
hist(fixed_x0_en(:,2),mem)
ylabel('Frequency','fontsize',FntSize)
plottitle = ['Distr. for source ' num2str(1) ', N=' num2str(mem)];
hold on
plot(x0(2),0,'.r','markersize',40)
title(plottitle,'fontsize',FntSize,'FontWeight','bold') 
hold on
subplot(133)
hist(fixed_x0_en(:,3),mem)
ylabel('Frequency','fontsize',FntSize)
plottitle = ['Distr. for source ' num2str(1) ', N=' num2str(mem)];
hold on
plot(x0(3),0,'.r','markersize',40)
title(plottitle,'fontsize',FntSize,'FontWeight','bold') 
% 
%% Parameters Definition
%% eNkF
tv=1;
pri_var=[];
analy_mean=[];
x_mean=[]; 
SSS1=[]; 
SSS2=[]; 
SSS3=[];
XF1=[];
XF2=[];
XF3=[];
YO1=[];
YO2=[];
x_mean2=[];
times=[];
INDD=[];
Xa1=[];
Xa2=[];
Xa3=[];
%%
%% Main Code
for t=dt:dt:tc  
   x_f=[];
   P=[];
   xx=[];
   s=0;
   SS1=[];
   SS2=[];   
   SS3=[];
    for i=1:mem 
        XX=x0_en(i,:)'; 
        tspan=[(t-dt):0.01:t]; 
        a=length(tspan);
        if i==1
            times=[times; tspan'];
        end
        [tt,X]=ode45(@VanderPol,tspan, XX); %Forecast State
       s=s+X; 
       x_f=[x_f;X(end,:)];
       SS1=[SS1; X(1:end,1)'];
       SS2=[SS2; X(1:end,2)'];
       SS3=[SS3; X(1:end,3)'];
    end
   SSS1=[SSS1 SS1(:,1:end-1)];
   SSS2=[SSS2 SS2(:,1:end-1)];
   SSS3=[SSS3 SS3(:,1:end-1)];
   XF1=[XF1 x_f(:,1)];
   XF2=[XF2 x_f(:,2)];
   XF3=[XF3 x_f(:,3)];
   meanx=s/mem;
   x_mean=[x_mean;s(1:end-1,:)/mem]; % Forecast Ensemble Mean%
   t0=mean(x_f);  
%% truth values%%
ind=find(tr>=t-dt & tr<=t);% xr truth RMSE
XR=xr(ind,:);
INDD=[INDD; XR];
%% Background Matrix
x_mean2=[x_mean2;t0]; %ensemble mean of xf%
t1=[x_f(:,1)-t0(1) x_f(:,2)-t0(2) x_f(:,3)-t0(3)]; %Ensemble Error matrix%   
B=[t1'*t1/(mem-1)]; % Covariance Error% 
    if t==dt
    backgroundB=B
    end  
r=1.1;
for i=1:mem
x_f(i,1)=r*(x_f(i,1)-mean(x_f(i,1)))+mean(x_f(i,1));
x_f(i,2)=r*(x_f(i,2)-mean(x_f(i,2)))+mean(x_f(i,2));
x_f(i,3)=r*(x_f(i,3)-mean(x_f(i,3)))+mean(x_f(i,3));
end 
Bx=B(1,1);
By=B(2,2);
pri_var=[pri_var; Bx By];
%% Observation %
files3=dir(fullfile(myf3,'per_obs1.txt'));
dm1=dlmread(fullfile(myf3,files3(1).name));
files3=dir(fullfile(myf3,'per_obs2.txt'));
dm2=dlmread(fullfile(myf3,files3(1).name));
yo=[dm1(:,tv) dm2(:,tv)];
%% current
% yo=[U(tv,1)+randn(mem,1)*sqrt(R) U(tv,2)+randn(mem,1)*sqrt(R)]; 
% YO1=[YO1 yo(:,1)];
% YO2=[YO2 yo(:,2)];
%%
t2=[yo'*yo/(mem-1)];
%t2=[R 0; 0 R]; %Noise Covariance matrix%
K=B*H'*inv(H*B*H'+t2); %Kalman Filter%
%% coupled
xa=x_f'+K*(yo'-H*x_f'); % coupled
% %% decoupled
% Ks=K(1:m-1,1:m-1); %state Kalman Gain
% Kp=K(m,1:m-1); %Paratmeter Kalman Gain
% xa1=x_f(:,1:m-1)'+0*Ks*(yo'-H*x_f');
% xa2=x_f(:,m)'+1*Kp*(yo'-H*x_f');
% xa=cat(1,xa1,xa2);
%%
xa=xa'; 
if t>stp
    xa=x_f;
end
Xa1=[Xa1 xa(:,1)];
Xa2=[Xa2 xa(:,2)];
Xa3=[Xa3 xa(:,3)];
x0_en=xa;
Emean=0;
   for i=1:mem
Emean=Emean+xa(i,:);
   end
Emean=Emean/mem;  
analy_mean=[analy_mean; Emean];
tv=tv+1;
%% Arrays
  if t==tc
    break
  end  
end
x_mean=[x_mean;s(end,:)/mem];
SSS1=[SSS1 SS1(:,end)];
SSS2=[SSS2 SS2(:,end)];
SSS3=[SSS3 SS3(:,end)];

%% store values in a file
%dd=[U(:,1) U(:,2)];
dlmwrite('initial_mu_1.txt',fixed_x0_en);
% dlmwrite('obs.txt',dd);
% dlmwrite('per_obs1.txt',YO1);
% dlmwrite('per_obs2.txt',YO2);
time=dt:dt:tc;
TIME=[time' time'*10];

%% Particle Filter
Ppri_var=[];
PSSS1=[];
PW=[];
PSSS2=[];
PSSS3=[];
Px_mean=[];
PXF1=[];
PXF2=[];
PXF3=[];
x0_en=fixed_x0_en;
Msize= 12;
Neffective=[];
POS_mean=[];
X_A1=[];
X_A2=[];
X_A3=[];
%RMSE_z=[];
%RMSE_x=[];
%RMSE_y=[];
tv=1;
for t=dt:dt:tc   
   Px_f=[];
   P_w=[];
   s=0;
   PSS1=[];
   PSS2=[]; 
   PSS3=[];
nu=mean(x0_en(:,3));
nuv=var(x0_en(:,3));
delta = 0.99;
a = (3*delta-1)/(2*delta);
% for i=1:mem
% z=a*x0_en(i,3)+(1-a)*nu;
% x0_en(i,3)=z+randn*sqrt(nuv*(1-a*a)) ; 
% end
    for i=1:mem 
       PXX=x0_en(i,:)'; 
       tspan=[(t-dt):0.01:t];      
       [tt,X]=ode45(@VanderPol,tspan,PXX); %Forecast State%
       s=s+X; 
       Px_f=[Px_f; X(end,:)];  
       PSS1=[PSS1; X(1:end,1)'];
       PSS2=[PSS2; X(1:end,2)'];
       PSS3=[PSS3; X(1:end,3)'];
    end 
   PSSS1=[PSSS1 PSS1(:,1:end-1)];
   PSSS2=[PSSS2 PSS2(:,1:end-1)];
   PSSS3=[PSSS3 PSS3(:,1:end-1)];
   PXF1=[PXF1 Px_f(:,1)];
   PXF2=[PXF2 Px_f(:,2)];
   PXF3=[PXF3 Px_f(:,3)];
   Pmeanx=s/mem;
   Px_mean=[Px_mean; s(1:end-1,:)/mem]; % Forecast Ensemble Mean%    
Pt0=mean(Px_f);    
Pt1=[Px_f(:,1)-Pt0(1) Px_f(:,2)-Pt0(2) Px_f(:,3)-Pt0(3)]; %Ensemble Error matrix%   
PB=Pt1'*Pt1/(mem-1); % Covariance Error% 
PBx=PB(1,1);
PBy=PB(2,2);
Ppri_var=[Ppri_var; PBx PBy];
%% previous
files3=dir(fullfile(myf3,'obs.txt'));
dm=dlmread(fullfile(myf3,files3(1).name));
u1=dm(tv,1);
u2=dm(tv,2);
vhat=[u1 u2]-Px_f(:,1:2);
%% current
%vhat=[U(tv,1) U(tv,2)]-Px_f(:,1:2);
%% weights (Observation density)
%as per Lorentz
P_t2=[R 0; 0 R];
for i=1:mem   
P_w(i) =(1/(1+((((vhat(i,:))/(P_t2))*vhat(i,:)'))));
end
P_w=P_w';
%% Normailze
P_w=P_w/sum(P_w);
PW=[PW P_w];
Neff=0;
for i=1:mem
Neff=Neff+P_w(i)^2;    
end
neff=1/Neff;
Neffective=[Neffective; neff];
%% filter resampling
cum=cumsum(P_w);% cumulative sum %
if neff < mem/2
% ind = resampstr(P_w);
% x0_en= Px_f(ind,:); 
 j=1;
   y=(1/mem)*rand;
   for i=1:mem
    u(i)=y+(1/mem)*(i-1);
    while u(i)>cum(j)
        j=j+1;
    end
   x0_en(i,:) = Px_f(j,:);   
   end    
else
    x0_en = Px_f;
end
for i=1:mem
z=a*x0_en(i,3)+(1-a)*nu;
x0_en(i,3)=z+randn*sqrt(nuv*(1-a*a)) ; 
end 
%% Parameter Only 
% if neff< mem/2
% ind = resampstr(P_w);
% x0_en(:,3) = Px_f(ind,3);  
% %  j=1;
% %    y=(1/mem)*rand;
% %    for i=1:mem
% %     u(i)=y+(1/mem)*(i-1);
% %     while u(i)>cum(j)
% %         j=j+1;
% %     end
% %       x0_en(i,3) = Px_f(j,3);  
% %    end   
%  
% else
%     x0_en = Px_f;
% end
%%
% if t>stp
%      x0_en = Px_f;
% end
% for i=1:mem
% z=a*x0_en(i,3)+(1-a)*nu;
% x0_en(i,3)=z+randn*sqrt(nuv*(1-a*a)) ; 
% end


X_A1=[X_A1 x0_en(:,1)];
X_A2=[X_A2 x0_en(:,2)];
X_A3=[X_A3 x0_en(:,3)];
Pos_mean=0;
   for i=1:mem
       Pos_mean= Pos_mean+Px_f(i,:)*P_w(i); %weighted mean
   end
Pos_mean=Pos_mean; 
POS_mean=[POS_mean; Pos_mean];
% rmse_bs = sqrt(mean((x0_en(:,1)-Ut(tv,1)).^2));
% RMSE_x=[RMSE_x;rmse_bs]; 
% rmse_bs = sqrt(mean((x0_en(:,2)-Ut(tv,2)).^2));
% RMSE_y=[RMSE_y;rmse_bs];
% rmse_bs = sqrt(mean((x0_en(:,3)-Ut(tv,3)).^2));
% RMSE_z=[RMSE_z;rmse_bs]; 
tv=tv+1;
%%
 if t==tc
    break
 end  
end
Px_mean=[Px_mean;s(end,:)/mem];
PSSS1=[PSSS1 PSS1(:,end)];
PSSS2=[PSSS2 PSS2(:,end)];
PSSS3=[PSSS3 PSS3(:,end)];
times=TT';

figure(2);
subplot(3,1,1)
ind=find(TIME(:,1)==stp)
[fq,xq] = ksdensity(X_A1(:,ind));
plot(xq,fq,'b-'); hold on;
[fq,xq] = ksdensity(PSSS1(:,ind));
plot(xq,fq,'r-');
tmp=get(gca,'ylim');
plot([Ut(ind,1) Ut(ind,1)],tmp*2,'k-');
set(gca,'ylim',tmp);
hold off;
legend('Posterior','Prior');
title('Empirical PDF of p(\psi | y_{1:T}) ')
subplot(3,1,2)
[fq,xq] = ksdensity(X_A2(:,ind));
plot(xq,fq,'b-'); hold on;
[fq,xq] = ksdensity(PSSS2(:,ind));
plot(xq,fq,'r-');
tmp=get(gca,'ylim');
plot([Ut(ind,2) Ut(ind,2)],tmp*2,'k-');
set(gca,'ylim',tmp);
hold off;
legend('Posterior','Prior');
title('Empirical PDF of p(\eta | y_{1:T})')
subplot(3,1,3)
[fq,xq] = ksdensity(X_A3(:,ind));
plot(xq,fq,'b-'); hold on;
[fq,xq] = ksdensity(PSSS3(:,ind));
plot(xq,fq,'r-');
tmp=get(gca,'ylim');
plot([Ut(ind,3) Ut(ind,3)],tmp*2,'k-');
set(gca,'ylim',tmp);
hold off;
legend('Posterior','Prior');
title('Empirical PDF of p(\mu | y_{1:T})')

